#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
@author: Lei Cheng

Function: Output pixel coordinates and timestamp of this frame when mouse clicking. 

pre-requirements for generating videos:
rosbag2video.py : https://github.com/leicheng5/rosbag2video    
 1) ffmpeg is needed and can be installed on Ubuntu with:
      sudo apt install ffmpeg
 2) ros and other stuff:
      sudo apt install python3-roslib python3-sensor-msgs python3-opencv
 3) usage:
      ./rosbag2video_leicheng.py --fps 30 -o calib0123_ori.mp4 test_cam_2022-01-23-14-26-55.bag
"""

import cv2

file_input='/home/kevalen/AWR1843_correction_ws/calib0123_ori.mp4'

speed=10    ### set small value to speed up the video playback,set 33 to simulate the real framerate=30
pix_xy=[]
timestamps=[]
################################# function def
def video_flag():
    frame = 0   
    cap = cv2.VideoCapture(file_input)
    fps = cap.get(cv2.CAP_PROP_FPS)
    print(fps)
    # frame=cv2.imread('E:/temp/vlcsnap-2020-09-11-17h35m32s537.png')


    def on_EVENT_LBUTTONDOWN(event, x, y, flags, param):
        if event == cv2.EVENT_LBUTTONDOWN:
            xy = "%d,%d" % (x, y)
            # cv2.circle(frame, (x, y), 1, (255, 0, 0), thickness = -1)
            # cv2.putText(frame, xy, (x, y), cv2.FONT_HERSHEY_PLAIN,
            #             3.0, (0,0,0), thickness = 3)
            timestamp=cap.get(cv2.CAP_PROP_POS_MSEC)#MSEC divided by 1000 to get sec
            pix_xy.append([x,y])
            timestamps.append(timestamp)
            num=len(timestamps)
            cv2.imwrite('images/'+str(num) + '.jpg',frame)#each click with one picture been writting
            print(x,y)
            #print('this is xy:',xy)
            #print('this is xy:',pix_xy)
            print(timestamp)
            #print("BGR is", frame[y, x])
            cv2.imshow("video", frame)
    cv2.namedWindow('video', cv2.WINDOW_NORMAL)
    cv2.setMouseCallback("video", on_EVENT_LBUTTONDOWN)

    while(True):    
        frame_exists, frame = cap.read()
        if not frame_exists:
        #     print(cap.get(cv2.CAP_PROP_POS_MSEC))
        # else:    
            break  
        cv2.imshow("video", frame)  
        #c = cv2.waitKey(2) ### set small value to speed up the video playback
        c = cv2.waitKey(speed) ### set small value to speed up the video playback
        #c = cv2.waitKey(33)### set 33 to simulate the real framerate=30
        if c == 27:   # press esc button
            break
            
    cap.release()
    cv2.destroyAllWindows()

    
################################# function call

video_flag()

################################# write values to file
# with open("pix_xy.txt","w") as f:
#     f.write(str(pix_xy))  #use with then we don't need f.close()

################################## Example output results
'''

pix_xy=[[160, 154],
 [203, 148],
 [240, 144],
 [276, 140],
 [313, 137],
 [342, 136],
 [377, 133],
 [370, 138],
 [396, 141],
 [421, 146],
 [378, 146],
 [351, 148],
 [311, 152],
 [270, 156],
 [248, 157],
 [222, 160],
 [195, 165],
 [170, 168],
 [141, 171],
 [118, 180],
 [156, 176],
 [193, 171],
 [232, 167],
 [270, 165],
 [319, 160],
 [358, 157],
 [400, 157],
 [436, 163],
 [370, 167],
 [309, 172],
 [247, 176],
 [167, 183],
 [90, 194],
 [74, 212],
 [152, 200],
 [227, 193],
 [305, 186],
 [375, 182],
 [440, 180],
 [512, 184],
 [557, 185],
 [576, 200],
 [496, 197],
 [432, 193],
 [355, 191],
 [290, 191],
 [228, 194],
 [179, 195],
 [121, 201],
 [76, 209],
 [67, 227],
 [136, 221],
 [219, 211],
 [301, 204],
 [370, 203],
 [453, 200],
 [512, 203],
 [580, 205],
 [587, 225],
 [487, 217],
 [399, 212],
 [317, 210],
 [239, 209],
 [167, 215],
 [88, 224],
 [51, 246],
 [125, 239],
 [223, 230],
 [320, 225],
 [432, 223],
 [523, 235],
 [604, 263],
 [484, 265],
 [367, 266],
 [256, 270],
 [152, 279],
 [64, 300],
 [47, 345],
 [170, 318],
 [170, 318],
 [407, 277],
 [473, 277],
 [543, 281],
 [584, 295],
 [513, 296],
 [386, 294],
 [286, 299],
 [198, 310],
 [92, 328],
 [67, 373],
 [196, 355],
 [344, 329],
 [446, 318],
 [508, 331],
 [590, 374],
 [466, 374],
 [348, 376],
 [247, 388],
 [159, 403],
 [57, 426],
 [167, 453],
 [249, 423],
 [320, 374],
 [415, 348],
 [529, 349],
 [594, 367],
 [595, 419],
 [469, 425],
 [340, 429],
 [319, 407],
 [234, 376],
 [164, 391]]
 
 
 
 
 
timestamps=[14366.666666666668,
 34200.0,
 69200.0,
 116700.0,
 145766.66666666666,
 166833.33333333334,
 196900.0,
 216933.33333333334,
 242500.0,
 260666.6666666667,
 282466.6666666666,
 303533.3333333333,
 328666.6666666667,
 353400.0,
 374033.3333333333,
 393800.0,
 412966.6666666666,
 428633.3333333333,
 443533.3333333333,
 471700.0,
 500133.3333333333,
 544900.0,
 560133.3333333334,
 583700.0,
 605866.6666666666,
 634100.0,
 650766.6666666666,
 668300.0,
 687566.6666666666,
 708733.3333333334,
 726633.3333333334,
 750300.0,
 767733.3333333334,
 790366.6666666666,
 805133.3333333334,
 823199.9999999999,
 842966.6666666667,
 859466.6666666667,
 874366.6666666666,
 888633.3333333334,
 908400.0,
 922500.0,
 938366.6666666666,
 968699.9999999999,
 981833.3333333334,
 997699.9999999999,
 1018133.3333333334,
 1033333.3333333333,
 1047400.0000000001,
 1065200.0,
 1086966.6666666667,
 1101200.0,
 1117266.6666666667,
 1134200.0,
 1147400.0,
 1166266.6666666667,
 1177533.3333333333,
 1196066.6666666665,
 1209100.0,
 1234633.3333333333,
 1246100.0,
 1258700.0,
 1274633.3333333333,
 1290600.0,
 1310233.3333333333,
 1326333.3333333333,
 1340766.6666666667,
 1355866.6666666665,
 1370533.3333333333,
 1384333.3333333333,
 1397033.3333333333,
 1411566.6666666665,
 1424666.6666666667,
 1447066.6666666665,
 1460333.3333333333,
 1473500.0,
 1486200.0,
 1499066.6666666665,
 1510266.6666666667,
 1536300.0,
 1557033.3333333333,
 1566766.6666666667,
 1577866.6666666665,
 1588833.3333333333,
 1598800.0,
 1610500.0,
 1626600.0,
 1641133.3333333333,
 1656466.6666666667,
 1667433.3333333335,
 1680733.3333333333,
 1693000.0,
 1702300.0,
 1711066.6666666665,
 1722399.9999999998,
 1743266.6666666667,
 1751800.0,
 1761566.6666666665,
 1773066.6666666665,
 1782500.0,
 1804899.9999999998,
 1817566.6666666665,
 1829133.3333333333,
 1841866.6666666665,
 1858899.9999999998,
 1865866.6666666665,
 1875700.0,
 1901899.9999999998,
 1912833.3333333333,
 1921399.9999999998,
 1931466.6666666667,
 1939800.0] 
################################################################
'''